let createError,express,path,cookieParser,logger,indexRouter,headers,cors;_db5‍.x([["default",()=>_db5‍.o]]);_db5‍.w("http-errors",[["default",["createError"],function(v){createError=v}]]);_db5‍.w("express",[["default",["express"],function(v){express=v}]]);_db5‍.w("path",[["default",["path"],function(v){path=v}]]);_db5‍.w("cookie-parser",[["default",["cookieParser"],function(v){cookieParser=v}]]);_db5‍.w("morgan",[["default",["logger"],function(v){logger=v}]]);_db5‍.w("./routes/index",[["default",["indexRouter"],function(v){indexRouter=v}]]);_db5‍.w("./middlewares/headers",[["default",["headers"],function(v){headers=v}]]);_db5‍.w("cors",[["default",["cors"],function(v){cors=v}]]);







const app = express();

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, '/public')));
app.use(headers());
app.use('/', indexRouter);

// catch 404 and forward to error handler
app.use((req, res, next) => {
  next(createError(404));
});

// error handler
app.use((err, req, res, next) => {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.json({
    status: 'error',
    message: err.message,
    errors: err.errors,
    stack: err.stack,
  });
});

_db5‍.d(app);
